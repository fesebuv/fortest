if (typeof __decorate !== "function") __decorate = function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
if (typeof __metadata !== "function") __metadata = function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
if (typeof __param !== "function") __param = function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Component, View, Attribute, onChange, coreDirectives } from 'angular2/angular2';
// TODO: write unit tests
// TODO: move view template into file (template bundling in build step needed)
export let Progressbar = class {
    constructor(value, max) {
        this.value = value || 0;
        this.max = max || 100;
    }
    _computePercentWidth(value) {
        this.percentWidth = +(100 * value / this.max).toFixed(2) + '%';
    }
    onChange(changes) {
        if (changes['value']) {
            this._computePercentWidth(changes['value'].currentValue);
        }
    }
};
Object.defineProperty(Progressbar, "name", { value: "Progressbar", configurable: true });
Progressbar = __decorate([
    Component({
        selector: 'boot-progressbar',
        properties: ['value'],
        lifecycle: [onChange],
        directives: [coreDirectives]
    }),
    View({
        template: `
  <div class="progress">
    <div class="progress-bar" role="progressbar"
      [style.width]="percentWidth" aria-valuemin="0" [attr.aria-valuemax]="max">
      <content></content>
      <span class="sr-only">{{percentWidth}}</span>
    </div>
  </div>
  `
    }),
    __param(0, Attribute('value')),
    __param(1, Attribute('max')), 
    __metadata('design:paramtypes', [Object, Object])
], Progressbar);

//# sourceMappingURL=../../components/progressbar/progressbar.js.map