{"version":3,"sources":["components/progressbar/progressbar.ts"],"names":["Progressbar","Progressbar.constructor","Progressbar._computePercentWidth","Progressbar.onChange"],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,EAAC,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,cAAc,EAAC,MAAM,mBAAmB,CAAC;AAEvF,yBAAyB;AACzB,8EAA8E;AAE9E;IAsBEA,YAAgCA,KAAKA,EAAoBA,GAAGA;QAC1DC,IAAIA,CAACA,KAAKA,GAAGA,KAAKA,IAAIA,CAACA,CAACA;QACxBA,IAAIA,CAACA,GAAGA,GAAGA,GAAGA,IAAIA,GAAGA,CAACA;IACxBA,CAACA;IAEDD,oBAAoBA,CAACA,KAAaA;QAChCE,IAAIA,CAACA,YAAYA,GAAGA,CAACA,CAACA,GAAGA,GAAGA,KAAKA,GAAGA,IAAIA,CAACA,GAAGA,CAACA,CAACA,OAAOA,CAACA,CAACA,CAACA,GAAGA,GAAGA,CAACA;IACjEA,CAACA;IAEDF,QAAQA,CAACA,OAAOA;QACdG,EAAEA,CAACA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;YACrBA,IAAIA,CAACA,oBAAoBA,CAACA,OAAOA,CAACA,OAAOA,CAACA,CAACA,YAAYA,CAACA,CAAAA;QAC1DA,CAACA;IACHA,CAACA;AACHH,CAACA;;AApCD;IAAC,SAAS,CAAC;QACT,QAAQ,EAAE,kBAAkB;QAC5B,UAAU,EAAE,CAAC,OAAO,CAAC;QACrB,SAAS,EAAE,CAAC,QAAQ,CAAC;QACrB,UAAU,EAAE,CAAC,cAAc,CAAC;KAC7B,CAAC;IACD,IAAI,CAAC;QACJ,QAAQ,EAAE;;;;;;;;GAQT;KACF,CAAC;IAMY,WAAC,SAAS,CAAC,OAAO,CAAC,CAAA;IAAQ,WAAC,SAAS,CAAC,KAAK,CAAC,CAAA;;gBAczD;AAAA","file":"components/progressbar/progressbar.js","sourcesContent":["import {Component, View, Attribute, onChange, coreDirectives} from 'angular2/angular2';\n\n// TODO: write unit tests\n// TODO: move view template into file (template bundling in build step needed)\n\n@Component({\n  selector: 'boot-progressbar',\n  properties: ['value'],\n  lifecycle: [onChange],\n  directives: [coreDirectives]\n})\n@View({\n  template: `\n  <div class=\"progress\">\n    <div class=\"progress-bar\" role=\"progressbar\"\n      [style.width]=\"percentWidth\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"max\">\n      <content></content>\n      <span class=\"sr-only\">{{percentWidth}}</span>\n    </div>\n  </div>\n  `\n})\nexport class Progressbar {\n  value: number;\n  percentWidth: string;\n  max: number;\n\n  constructor(@Attribute('value') value, @Attribute('max') max) {\n    this.value = value || 0;\n    this.max = max ||Â 100;\n  }\n\n  _computePercentWidth(value: number) {\n    this.percentWidth = +(100 * value / this.max).toFixed(2) + '%';\n  }\n\n  onChange(changes) {\n    if (changes['value']) {\n      this._computePercentWidth(changes['value'].currentValue)\n    }\n  }\n}\n"],"sourceRoot":"/source/"}